import streamlit as st
from PIL import Image
import os
from streamlit_folium import st_folium

# --- Import your clean helper functions ---
from helpers import to_nepali_num, load_content, load_geospatial_data, create_folium_map

# --- Constants and Dictionaries ---
TEXT = {
    'en': {'dashboard_title': "Municipal Ward Dashboard", 'dashboard_subtitle': "A unified platform for ward-level statistics and social mapping.", 'controls_header': "Dashboard Controls", 'select_ward': "Select a Ward", 'choose_ward': "Choose a ward...", 'view_ward_button': "Update Dashboard", 'map_layers': "Map Layers", 'select_points': "Select points to display on map:", 'choose_options': "Choose options", 'dashboard_info': "Select a ward and click 'Update Dashboard' to refresh.", 'welcome_message': "## Welcome! Please select a ward and click 'Update Dashboard' to begin.", 'ward_profile_title': "Profile of Ward {ward}", 'social_map_header': "", 'geodata_error': "Geospatial data for Ward {ward} could not be loaded.", 'profile_summary_header': "Ward Profile Summary", 'no_sector_data': "No sector-specific information is available for this sector.", 'infographics_header': "üìä Social Mapping", 'caption_unavailable': "No description available.", 'image_not_found': "Image not found at path: {path}", 'selected_points_header': "Total Counts for Selected Points"},
    'ne': {'dashboard_title': "‡§®‡§ó‡§∞‡§™‡§æ‡§≤‡§ø‡§ï‡§æ ‡§µ‡§æ‡§∞‡•ç‡§° ‡§°‡•ç‡§Ø‡§æ‡§∏‡§¨‡•ã‡§∞‡•ç‡§°", 'dashboard_subtitle': "‡§µ‡§æ‡§∞‡•ç‡§°-‡§∏‡•ç‡§§‡§∞‡•Ä‡§Ø ‡§§‡§•‡•ç‡§Ø‡§æ‡§ô‡•ç‡§ï ‡§∞ ‡§∏‡§æ‡§Æ‡§æ‡§ú‡§ø‡§ï ‡§®‡§ï‡•ç‡§∏‡§æ‡§ô‡•ç‡§ï‡§®‡§ï‡•ã ‡§≤‡§æ‡§ó‡§ø ‡§è‡§ï ‡§è‡§ï‡•Ä‡§ï‡•É‡§§ ‡§™‡•ç‡§≤‡•á‡§ü‡§´‡§∞‡•ç‡§Æ‡•§", 'controls_header': "‡§°‡•ç‡§Ø‡§æ‡§∏‡§¨‡•ã‡§∞‡•ç‡§° ‡§®‡§ø‡§Ø‡§®‡•ç‡§§‡•ç‡§∞‡§£‡§π‡§∞‡•Ç", 'select_ward': "‡§µ‡§°‡§æ ‡§õ‡§æ‡§®‡•ç‡§®‡•Å‡§π‡•ã‡§∏‡•ç", 'choose_ward': "‡§è‡§â‡§ü‡§æ ‡§µ‡§°‡§æ ‡§õ‡§æ‡§®‡•ç‡§®‡•Å‡§π‡•ã‡§∏‡•ç...", 'view_ward_button': "‡§°‡•ç‡§Ø‡§æ‡§∏‡§¨‡•ã‡§∞‡•ç‡§° ‡§Ö‡§™‡§°‡•á‡§ü ‡§ó‡§∞‡•ç‡§®‡•Å‡§π‡•ã‡§∏‡•ç", 'map_layers': "‡§®‡§ï‡•ç‡§∏‡§æ ‡§§‡§π‡§π‡§∞‡•Ç", 'select_points': "‡§®‡§ï‡•ç‡§∏‡§æ‡§Æ‡§æ ‡§¶‡•á‡§ñ‡§æ‡§â‡§® ‡§Ö‡§Ç‡§ï‡§π‡§∞‡•Ç ‡§ö‡§Ø‡§® ‡§ó‡§∞‡•ç‡§®‡•Å‡§π‡•ã‡§∏‡•ç:", 'choose_options': "‡§µ‡§ø‡§ï‡§≤‡•ç‡§™‡§π‡§∞‡•Ç ‡§õ‡§æ‡§®‡•ç‡§®‡•Å‡§π‡•ã‡§∏‡•ç", 'dashboard_info': "‡§µ‡§ø‡§ï‡§≤‡•ç‡§™‡§π‡§∞‡•Ç ‡§ö‡§Ø‡§® ‡§ó‡§∞‡•ç‡§®‡•Å‡§π‡•ã‡§∏‡•ç ‡§∞ ‡§§‡§æ‡§ú‡§æ ‡§ó‡§∞‡•ç‡§® '‡§°‡•ç‡§Ø‡§æ‡§∏‡§¨‡•ã‡§∞‡•ç‡§° ‡§Ö‡§™‡§°‡•á‡§ü ‡§ó‡§∞‡•ç‡§®‡•Å‡§π‡•ã‡§∏‡•ç' ‡§Æ‡§æ ‡§ï‡•ç‡§≤‡§ø‡§ï ‡§ó‡§∞‡•ç‡§®‡•Å‡§π‡•ã‡§∏‡•ç‡•§", 'welcome_message': "## ‡§∏‡•ç‡§µ‡§æ‡§ó‡§§ ‡§õ! ‡§ï‡•É‡§™‡§Ø‡§æ ‡§∏‡•Å‡§∞‡•Å ‡§ó‡§∞‡•ç‡§® ‡§∏‡§æ‡§á‡§°‡§¨‡§æ‡§∞‡§¨‡§æ‡§ü ‡§è‡§â‡§ü‡§æ ‡§µ‡§°‡§æ ‡§õ‡§æ‡§®‡•ç‡§®‡•Å‡§π‡•ã‡§∏‡•ç ‡§∞ '‡§°‡•ç‡§Ø‡§æ‡§∏‡§¨‡•ã‡§∞‡•ç‡§° ‡§Ö‡§™‡§°‡•á‡§ü ‡§ó‡§∞‡•ç‡§®‡•Å‡§π‡•ã‡§∏‡•ç' ‡§Æ‡§æ ‡§ï‡•ç‡§≤‡§ø‡§ï ‡§ó‡§∞‡•ç‡§®‡•Å‡§π‡•ã‡§∏‡•ç‡•§", 'ward_profile_title': "‡§µ‡§°‡§æ {ward} ‡§ï‡•ã ‡§™‡•ç‡§∞‡•ã‡§´‡§æ‡§á‡§≤", 'social_map_header': "", 'geodata_error': "‡§µ‡§°‡§æ {ward} ‡§ï‡•ã ‡§≤‡§æ‡§ó‡§ø ‡§≠‡•å‡§ó‡•ã‡§≤‡§ø‡§ï ‡§°‡§æ‡§ü‡§æ ‡§≤‡•ã‡§° ‡§ó‡§∞‡•ç‡§® ‡§∏‡§ï‡§ø‡§è‡§®‡•§", 'profile_summary_header': "‡§®‡§ó‡§∞‡§™‡§æ‡§≤‡§ø‡§ï‡§æ‡§ï‡•ã ‡§∏‡§æ‡§ñ‡§æ ‡§Æ‡§π‡§æ‡§∏‡§ñ‡§æ", 'no_sector_data': "‡§Ø‡§∏ ‡§ï‡•ç‡§∑‡•á‡§§‡•ç‡§∞‡§ï‡§æ ‡§≤‡§æ‡§ó‡§ø ‡§ï‡•Å‡§®‡•à ‡§ï‡•ç‡§∑‡•á‡§§‡•ç‡§∞-‡§µ‡§ø‡§∂‡•á‡§∑ ‡§ú‡§æ‡§®‡§ï‡§æ‡§∞‡•Ä ‡§â‡§™‡§≤‡§¨‡•ç‡§ß ‡§õ‡•à‡§®‡•§", 'infographics_header': "üìä ‡§∏‡§æ‡§Æ‡§æ‡§ú‡§ø‡§ï ‡§®‡§ï‡•ç‡§∏‡§æ‡§ô‡•ç‡§ï‡§®", 'caption_unavailable': "‡§ï‡•Å‡§®‡•à ‡§µ‡§ø‡§µ‡§∞‡§£ ‡§â‡§™‡§≤‡§¨‡•ç‡§ß ‡§õ‡•à‡§®‡•§", 'image_not_found': "‡§™‡§•‡§Æ‡§æ ‡§õ‡§µ‡§ø ‡§´‡•á‡§≤‡§æ ‡§™‡§∞‡•á‡§®: {path}", 'selected_points_header': "‡§ö‡§Ø‡§® ‡§ó‡§∞‡§ø‡§è‡§ï‡§æ ‡§Ö‡§Ç‡§ï‡§π‡§∞‡•Ç‡§ï‡•ã ‡§ï‡•Å‡§≤ ‡§ó‡§£‡§®‡§æ", 'sectors': {'Health': '‡§∏‡•ç‡§µ‡§æ‡§∏‡•ç‡§•‡•ç‡§Ø', 'Education': '‡§∂‡§ø‡§ï‡•ç‡§∑‡§æ', 'Agriculture': '‡§ï‡•É‡§∑‡§ø', 'Environment': '‡§µ‡§æ‡§§‡§æ‡§µ‡§∞‡§£', 'Infrastructure': '‡§™‡•Ç‡§∞‡•ç‡§µ‡§æ‡§ß‡§æ‡§∞', 'Women & Child': '‡§Æ‡§π‡§ø‡§≤‡§æ ‡§∞ ‡§¨‡§æ‡§≤‡§¨‡§æ‡§≤‡§ø‡§ï‡§æ', 'Disaster': '‡§µ‡§ø‡§™‡§¶‡•ç', 'Economic Development': '‡§Ü‡§∞‡•ç‡§•‡§ø‡§ï ‡§µ‡§ø‡§ï‡§æ‡§∏', 'Urban Development': '‡§∂‡§π‡§∞‡•Ä ‡§µ‡§ø‡§ï‡§æ‡§∏', 'Civil Registration': '‡§®‡§æ‡§ó‡§∞‡§ø‡§ï ‡§¶‡§∞‡•ç‡§§‡§æ', 'Planning & Monitoring': '‡§Ø‡•ã‡§ú‡§®‡§æ ‡§∞ ‡§Ö‡§®‡•Å‡§ó‡§Æ‡§®'}, 'map_categories': {'Animal Farm': '‡§™‡§∂‡•Å ‡§´‡§æ‡§∞‡•ç‡§Æ', 'Apartments/Housing': '‡§Ö‡§™‡§æ‡§∞‡•ç‡§ü‡§Æ‡•á‡§®‡•ç‡§ü/‡§Ü‡§µ‡§æ‡§∏', 'Bank': '‡§¨‡•à‡§Ç‡§ï', 'Blue spaces (rivers, lakes, pond)': '‡§®‡•Ä‡§≤‡•ã ‡§ï‡•ç‡§∑‡•á‡§§‡•ç‡§∞ (‡§®‡§¶‡•Ä, ‡§§‡§æ‡§≤, ‡§™‡•ã‡§ñ‡§∞‡•Ä)', 'Bridge': '‡§™‡•Å‡§≤', 'Business': '‡§µ‡•ç‡§Ø‡§æ‡§™‡§æ‡§∞', 'Construction Sites': '‡§®‡§ø‡§∞‡•ç‡§Æ‡§æ‡§£ ‡§∏‡•ç‡§•‡§≤', 'Dumping Sites': '‡§´‡•ã‡§π‡•ã‡§∞ ‡§´‡§æ‡§≤‡•ç‡§®‡•á ‡§†‡§æ‡§â‡§Å', 'Educational Institute': '‡§∂‡•à‡§ï‡•ç‡§∑‡§ø‡§ï ‡§∏‡§Ç‡§∏‡•ç‡§•‡§æ‡§®', 'Farm for crops': '‡§ñ‡•á‡§§‡•Ä ‡§´‡§æ‡§∞‡•ç‡§Æ', 'Government Health Facility': '‡§∏‡§∞‡§ï‡§æ‡§∞‡•Ä ‡§∏‡•ç‡§µ‡§æ‡§∏‡•ç‡§•‡•ç‡§Ø ‡§∏‡•Å‡§µ‡§ø‡§ß‡§æ', 'Government office': '‡§∏‡§∞‡§ï‡§æ‡§∞‡•Ä ‡§ï‡§æ‡§∞‡•ç‡§Ø‡§æ‡§≤‡§Ø', 'Green Space': '‡§π‡§∞‡§ø‡§Ø‡•ã ‡§ï‡•ç‡§∑‡•á‡§§‡•ç‡§∞', 'Industry/Factory': '‡§â‡§¶‡•ç‡§Ø‡•ã‡§ó/‡§ï‡§æ‡§∞‡§ñ‡§æ‡§®‡§æ', 'Liquor Shops': '‡§∞‡§ï‡•ç‡§∏‡•Ä ‡§™‡§∏‡§≤', 'Mart (eg. BigMart, KKMart, Salesberry)': '‡§Æ‡§æ‡§∞‡•ç‡§ü (‡§â‡§¶‡§æ‡§π‡§∞‡§£: ‡§¨‡§ø‡§ó ‡§Æ‡§æ‡§∞‡•ç‡§ü, ‡§ï‡•á‡§ï‡•á ‡§Æ‡§æ‡§∞‡•ç‡§ü)', 'Meat Shops': '‡§Æ‡§æ‡§∏‡•Å ‡§™‡§∏‡§≤', 'NGO/INGOs/Private Office': '‡§ó‡•à‡§∞-‡§∏‡§∞‡§ï‡§æ‡§∞‡•Ä/‡§®‡§ø‡§ú‡•Ä ‡§ï‡§æ‡§∞‡•ç‡§Ø‡§æ‡§≤‡§Ø', 'Open Space': '‡§ñ‡•Å‡§≤‡§æ ‡§†‡§æ‡§â‡§Å', 'Petrol Pump': '‡§™‡•á‡§ü‡•ç‡§∞‡•ã‡§≤ ‡§™‡§Æ‡•ç‡§™', 'Pharmacy/Private Clinic/NGO Clinic': '‡§´‡§æ‡§∞‡•ç‡§Æ‡•á‡§∏‡•Ä/‡§®‡§ø‡§ú‡•Ä ‡§ï‡•ç‡§≤‡§ø‡§®‡§ø‡§ï', 'Police Station': '‡§™‡•ç‡§∞‡§π‡§∞‡•Ä ‡§ö‡•å‡§ï‡•Ä', 'Private Hospital/NGO Hospital': '‡§®‡§ø‡§ú‡•Ä ‡§Ö‡§∏‡•ç‡§™‡§§‡§æ‡§≤', 'Public Transporation Stand': '‡§∏‡§æ‡§∞‡•ç‡§µ‡§ú‡§®‡§ø‡§ï ‡§Ø‡§æ‡§§‡§æ‡§Ø‡§æ‡§§ ‡§∏‡•ç‡§ü‡•ç‡§Ø‡§æ‡§®‡•ç‡§°', 'Public Water Sources (Tap water, Well, Dhunge dhara, tube wellPub)': '‡§∏‡§æ‡§∞‡•ç‡§µ‡§ú‡§®‡§ø‡§ï ‡§™‡§æ‡§®‡•Ä‡§ï‡•ã ‡§∏‡•ç‡§∞‡•ã‡§§', 'Recreation Center': '‡§Æ‡§®‡•ã‡§∞‡§®‡•ç‡§ú‡§® ‡§ï‡•á‡§®‡•ç‡§¶‡•ç‡§∞', 'Rehabilitation center': '‡§™‡•Å‡§®‡§∞‡•ç‡§∏‡•ç‡§•‡§æ‡§™‡§®‡§æ ‡§ï‡•á‡§®‡•ç‡§¶‡•ç‡§∞', 'Religious Place': '‡§ß‡§æ‡§∞‡•ç‡§Æ‡§ø‡§ï ‡§∏‡•ç‡§•‡§≤', 'Residential': '‡§Ü‡§µ‡§æ‡§∏‡•Ä‡§Ø', 'Residential Institution': '‡§Ü‡§µ‡§æ‡§∏‡•Ä‡§Ø ‡§∏‡§Ç‡§∏‡•ç‡§•‡§æ', 'Risk Zone (Man hole, open wires, accident prone areas': '‡§ú‡•ã‡§ñ‡§ø‡§Æ ‡§ï‡•ç‡§∑‡•á‡§§‡•ç‡§∞ (‡§Æ‡•ç‡§Ø‡§æ‡§®‡§π‡•ã‡§≤, ‡§ñ‡•Å‡§≤‡§æ ‡§§‡§æ‡§∞)', 'Slum areas': '‡§∏‡•Å‡§ï‡•Å‡§Æ‡•ç‡§¨‡§æ‡§∏‡•Ä ‡§ï‡•ç‡§∑‡•á‡§§‡•ç‡§∞'}}
}
ALL_SECTORS = ['Health', 'Education', 'Agriculture', 'Environment', 'Infrastructure', 'Women & Child', 'Disaster', 'Economic Development', 'Urban Development', 'Civil Registration', 'Planning & Monitoring']

# --- UI HELPER FUNCTIONS ---
def display_infographics(images, txt):
    if not images: return
    st.markdown("---"); st.subheader(txt['infographics_header'])
    for item in images:
        if os.path.exists(item["path"]):
            image = Image.open(item["path"])
            caption_text = item.get('caption', {}).get(st.session_state.lang, txt['caption_unavailable'])
            width = item.get("width")
            if width: st.image(image, width=width, caption=f"*{caption_text}*")
            else: st.image(image, use_container_width=True, caption=f"*{caption_text}*")
            st.markdown("---")
        else: st.warning(txt['image_not_found'].format(path=item['path']))

def display_sector_content(sector_data, txt): pass

# --- 1. INITIAL PAGE CONFIGURATION ---
st.set_page_config(layout="wide", page_title="Ward Information Dashboard", page_icon="üó∫Ô∏è")

# --- 2. SESSION STATE INITIALIZATION ---
if 'lang' not in st.session_state: st.session_state.lang = 'en'
if 'active_ward' not in st.session_state: st.session_state.active_ward = None

# --- 3. DATA LOADING ---
WARD_CONTENT = load_content()
ward_options = list(WARD_CONTENT.keys())
txt = TEXT[st.session_state.lang]

# --- 4. UI: TOP HEADER ---
header_cols = st.columns([3, 1])
with header_cols[0]: st.title(txt['dashboard_title']); st.markdown(txt['dashboard_subtitle'])
with header_cols[1]:
    logo_cols = st.columns(3)
    for i, logo_path in enumerate(["assets/municipality_logo.jpg", "assets/herd_logo.jpg", "assets/kioch_logo.jpg"]):
        if os.path.exists(logo_path): logo_cols[i].image(logo_path, width=100 if i != 1 else 120)
st.markdown("---")

# --- 5. UI: SIDEBAR (SIMPLIFIED FOR STABILITY) ---
with st.sidebar:
    st.header(txt['controls_header'])
    
    # Language selection is lightweight and okay here
    lang_choice = st.radio("Language / ‡§≠‡§æ‡§∑‡§æ", ['en', 'ne'], format_func=lambda x: "English" if x == 'en' else "‡§®‡•á‡§™‡§æ‡§≤‡•Ä", horizontal=True, index=['en', 'ne'].index(st.session_state.lang))
    
    def format_ward_options(ward): return f"Ward {ward}" if lang_choice == 'en' else f"{TEXT['ne']['select_ward']} {to_nepali_num(ward)}"
    
    # Ward selection just stores the choice
    ward_choice = st.selectbox(TEXT[lang_choice]['select_ward'], options=ward_options, index=None, placeholder=TEXT[lang_choice]['choose_ward'], format_func=format_ward_options)

    # The button now commits BOTH choices at once
    if st.button(TEXT[lang_choice]['view_ward_button'], use_container_width=True, type="primary"):
        st.session_state.lang = lang_choice
        st.session_state.active_ward = ward_choice
        st.rerun() # Rerun to apply selections

    st.markdown("---")
    st.info(txt['dashboard_info'])

# --- 6. UI: MAIN PANEL DISPLAY ---
if not st.session_state.active_ward:
    st.info(txt['welcome_message'])
else:
    active_ward = st.session_state.active_ward
    content = WARD_CONTENT.get(active_ward, {})
    gdf_ward, df_points = load_geospatial_data(active_ward)
    
    display_ward = to_nepali_num(active_ward) if st.session_state.lang == 'ne' else active_ward
    st.header(txt['ward_profile_title'].format(ward=display_ward))
    st.markdown("---")

    col1, col2 = st.columns([3, 2])
    with col1:
        st.subheader(txt['social_map_header'])

        # --- NEW: Map Layer controls are now here, in the main panel ---
        selected_map_categories = []
        if df_points is not None and not df_points.empty:
            with st.expander(txt['map_layers'], expanded=True):
                def format_category_labels(cat): return txt.get('map_categories', {}).get(cat, cat)
                selected_map_categories = st.multiselect(txt['select_points'], options=sorted(df_points['Category'].unique()), format_func=format_category_labels, placeholder=txt['choose_options'])
        
        folium_map = create_folium_map(gdf_ward, df_points, selected_map_categories, txt)
        if folium_map: st_folium(folium_map, width='100%', height=500, returned_objects=[])
        elif gdf_ward is None: st.error(txt['geodata_error'].format(ward=display_ward))
        
        if selected_map_categories and df_points is not None:
            st.markdown(f"#### {txt['selected_points_header']}")
            category_counts = df_points[df_points['Category'].isin(selected_map_categories)]['Category'].value_counts()
            metric_cols = st.columns(min(len(category_counts), 4))
            for i, (cat_en, count) in enumerate(category_counts.items()):
                with metric_cols[i % 4]:
                    display_label = txt.get('map_categories', {}).get(cat_en, cat_en)
                    display_value = to_nepali_num(count) if st.session_state.lang == 'ne' else count
                    st.metric(label=display_label, value=display_value)
    with col2:
        st.subheader(txt['profile_summary_header'])
        sectors = content.get("sectors", {})
        sector_tabs = st.tabs([txt.get('sectors', {}).get(s, s) for s in ALL_SECTORS])
        for i, sector_name_en in enumerate(ALL_SECTORS):
            with sector_tabs[i]:
                if sector_name_en in sectors: display_sector_content(sectors[sector_name_en], txt)
                else: st.info(txt['no_sector_data'])
    
    display_infographics(content.get("images", []), txt)
